<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DamienTheUnbeliever.System.Linq</name>
    </assembly>
    <members>
        <member name="T:DamienTheUnbeliever.System.Linq.AsyncEnumerable">
            <summary>
            Provides a set of static (Shared in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,``0})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``1},System.Func{``1,``0,``1},System.Func{``1,``2})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``1},System.Func{``1,``0,``1})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,System.Threading.Tasks.ValueTask{``0}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,``2})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``1},System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,``2})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``1},System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``1},System.Func{``1,``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``1},System.Func{``1,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``3(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <param name="resultSelector">A transformation for the final result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},``1,System.Func{``1,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``0,System.Threading.Tasks.Task{``0}})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Aggregate``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``1},System.Func{``1,``0,``1})">
            <summary>
            Computes an aggregate from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the source sequence</typeparam>
            <typeparam name="TAccumulate">The type of aggregate to compute</typeparam>
            <param name="source">The original sequence</param>
            <param name="seed">An initial value for the aggregate</param>
            <param name="func">A function to compute a new value of the aggregate from its existing value and a new element from the source sequence</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.All``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Determines whether all elements in a sequence satisfy a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate that all elements should satisfy</param>
            <returns>true if all elements of the sequence satisfy the predicate</returns>
            <remarks>Note that it is vacuously true that an empty sequence satisfies the condition</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.All``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether all elements in a sequence satisfy a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate that all elements should satisfy</param>
            <returns>true if all elements of the sequence satisfy the predicate</returns>
            <remarks>Note that it is vacuously true that an empty sequence satisfies the condition</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.All``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Determines whether all elements in a sequence satisfy a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate that all elements should satisfy</param>
            <returns>true if all elements of the sequence satisfy the predicate</returns>
            <remarks>Note that it is vacuously true that an empty sequence satisfies the condition</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Any``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Determines whether there are any elements in the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <returns>true if any elements of the sequence satisfy the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Any``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Determines whether any elements in a sequence satisfy a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate that any elements should satisfy</param>
            <returns>true if any elements of the sequence satisfy the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Any``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Determines whether any elements in a sequence satisfy a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate that any elements should satisfy</param>
            <returns>true if any elements of the sequence satisfy the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Any``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Determines whether any elements in a sequence satisfy a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate that any elements should satisfy</param>
            <returns>true if any elements of the sequence satisfy the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Append``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``0})">
            <summary>
            Creates a sequence from an existing sequence and a new element that should appear after the existing ones
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The existing sequence</param>
            <param name="element">The new element</param>
            <returns>The sequence containing all elements from the original sequence and the new element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Append``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Creates a sequence from an existing sequence and a new element that should appear after the existing ones
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The existing sequence</param>
            <param name="element">The new element</param>
            <returns>The sequence containing all elements from the original sequence and the new element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Append``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Creates a sequence from an existing sequence and a new element that should appear after the existing ones
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The existing sequence</param>
            <param name="element">The new element</param>
            <returns>The sequence containing all elements from the original sequence and the new element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> via the introduction of tasks for individual elements
            </summary>
            <typeparam name="TResult">The type of elements in the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></typeparam>
            <param name="source">The source elements</param>
            <returns>The new <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></returns>
            <remarks>
            <para>The original sequence is consumed eagerly before this method returns</para>
            <para>This method is intended for internal use only</para>
            </remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.AsAsyncEnumerable``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> via the introduction of tasks for individual elements
            </summary>
            <typeparam name="TResult">The type of elements in the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></typeparam>
            <param name="source">The source elements</param>
            <returns>The new <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></returns>
            <remarks>
            <para>The original sequence is consumed eagerly before this method returns</para>
            <para>Items are returned in the same order as the original sequence</para>
            </remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.AsUnorderedAsyncEnumerable``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> via the introduction of tasks for individual elements
            </summary>
            <typeparam name="TResult">The type of elements in the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></typeparam>
            <param name="source">The source elements</param>
            <returns>The new <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></returns>
            <remarks>The original sequence is consumed eagerly before this method returns</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.AsAsyncEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> via the introduction of tasks for individual elements
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <typeparam name="TResult">The type of elements in the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></typeparam>
            <param name="source">The source elements</param>
            <param name="resultSelector">A method that will create a <see cref="T:System.Threading.Tasks.Task`1"/> for each element in the <paramref name="source"/></param>
            <returns>The new <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></returns>
            <remarks>
            <para>The original sequence is consumed eagerly and <paramref name="resultSelector"/> called on each element before this method returns</para>
            <para>Items are returned in the same order as the original sequence</para>
            </remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.AsUnorderedAsyncEnumerable``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> via the introduction of tasks for individual elements
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <typeparam name="TResult">The type of elements in the returned <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></typeparam>
            <param name="source">The source elements</param>
            <param name="resultSelector">A method that will create a <see cref="T:System.Threading.Tasks.Task`1"/> for each element in the <paramref name="source"/></param>
            <returns>The new <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/></returns>
            <remarks>The original sequence is consumed eagerly and <paramref name="resultSelector"/> called on each element before this method returns</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Int32})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int32}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Int64})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int64}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int64}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Decimal})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Decimal}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Decimal}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Single})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Single}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Single}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Double})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Double}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}})">
            <summary>
            Computes the average value of values in a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Double}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Average``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Computes the average value of values selected from items in a sequence via a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to extract the values to averag</param>
            <returns>The average value of the elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Cast``2(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Casts the elements of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to the specified type
            </summary>
            <typeparam name="TSource">The basic type of elements contained in the sequence</typeparam>
            <typeparam name="TResult">The type of elements desired in the result</typeparam>
            <param name="source">The sequence of elements to cast</param>
            <returns>A sequence of elements that are <typeparamref name="TResult"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Concat``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Creates a sequence by concatenating two other sequence
            </summary>
            <typeparam name="TSource">The type of items contained in both sequences</typeparam>
            <param name="first">The sequence of items that should appear first in the combined sequence</param>
            <param name="second">The sequence of items that should appear in the combined sequence once <paramref name="first"/> is exhausted</param>
            <returns>The combined sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Contains``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Determines whether a value is contained in a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="value">The value to locate</param>
            <returns>True if the sequence contains the value, otherwise false</returns>
            <remarks>The default equality comparer for <typeparamref name="TSource"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Contains``1(System.Collections.Generic.IAsyncEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether a value is contained in a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="value">The value to locate</param>
            <param name="comparer">The comparer to use for comparing elements in the sequence with <paramref name="value"/></param>
            <returns>True if the sequence contains the value, otherwise false</returns>
            <remarks>If <paramref name="comparer"/>> is null, the default equality comparer for <typeparamref name="TSource"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Count``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the number of elements contained in a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LongCount``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the number of elements contained in a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Count``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the number of elements contained in a sequence that match the <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to match</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Count``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the number of elements contained in a sequence that match the <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to match</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Count``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the number of elements contained in a sequence that match the <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to match</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LongCount``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the number of elements contained in a sequence that match the <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to match</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LongCount``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the number of elements contained in a sequence that match the <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to match</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LongCount``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the number of elements contained in a sequence that match the <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to match</param>
            <returns>The number of elements in the sequence that matched the predicate</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.DefaultIfEmpty``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Ensures we have at least one element in a sequence by supplying a default
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The possible empty sequence of elements</param>
            <returns>A non-empty sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.DefaultIfEmpty``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Ensures we have at least one element in a sequence by supplying a default
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The possible empty sequence of elements</param>
            <param name="defaultValue">The element to return if the sequence is empty</param>
            <returns>A non-empty sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Distinct``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Finds the distinct elements in a sequence
            </summary>
            <typeparam name="TSource">The type of elements contained in the sequences</typeparam>
            <param name="source">The sequence</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Distinct``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Finds the distinct elements in a sequence
            </summary>
            <typeparam name="TSource">The type of elements contained in the sequences</typeparam>
            <param name="source">The sequence</param>
            <param name="comparer">How elements in the sequence should be compared for equality. If null, the default comparer for <typeparamref name="TSource"/> will be used</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ElementAt``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at the specified index in the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence</param>
            <param name="index">The position within the sequence to locate</param>
            <returns>The element at the specified index</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">If <paramref name="index"/> is less than 0 or would require a longer sequence than <paramref name="source"/></exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ElementAtOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns the element at the specified index in the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence</param>
            <param name="index">The position within the sequence to locate</param>
            <returns>The element at the specified index if the index is within bounds. default<typeparamref name="TSource"/> otherwise</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Empty``1">
            <summary>
            Yields an async enumerable containing no elements
            </summary>
            <typeparam name="TSource">The type of elements the empty sequence will not contain</typeparam>
            <returns>A sequence containing no elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Except``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Performs the set except between two sequences
            </summary>
            <typeparam name="TSource">The type of elements contained in both sequences</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Except``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs the set except between two sequences
            </summary>
            <typeparam name="TSource">The type of elements contained in both sequences</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="comparer">How elements in the sequences should be compared for equality. If null, the default comparer for <typeparamref name="TSource"/> will be used</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.First``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the first element of the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The first element of the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.FirstOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the first element of the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The first element of the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.First``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the first element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.First``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.First``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the first element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.FirstOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the first element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.FirstOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the first element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.FirstOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the first element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Transform each element.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.Task{``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Transform each element.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Transform each element.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},``3})">
            <summary>
            Form groups of elements using a key selector.Transform each element.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.Task{``3}})">
            <summary>
            Form groups of elements using a key selector.Transform each element.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``2},System.Threading.Tasks.ValueTask{``3}})">
            <summary>
            Form groups of elements using a key selector.Transform each element.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Transform each element.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Transform each element.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Transform each element.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Form groups of elements using a key selector.Transform each element.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``2}})">
            <summary>
            Form groups of elements using a key selector.Transform each element.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Form groups of elements using a key selector.Transform each element.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TElement">The type into which each element of the sequence is transformed</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="elementSelector">The transformation to apply to individual elements</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},``2})">
            <summary>
            Form groups of elements using a key selector.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``2}})">
            <summary>
            Form groups of elements using a key selector.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``1,System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Form groups of elements using a key selector.Combine the elements into a result.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <typeparam name="TResult">The type of the final result</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="resultSelector">The function to reduce the transformed elements into a final result</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Form groups of elements using a key selector.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <param name="comparer">The means by which elements are compared</param>
            <returns>The set of result</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Form groups of elements using a key selector.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Form groups of elements using a key selector.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Form groups of elements using a key selector.
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type used as the key for grouping</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract keys from the elements</param>
            <returns>The set of result</returns>
            <remarks>The default equality comparer for <typeparamref name="TKey"/> will be used</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},``3})">
            <summary>
            Joins two sequences based on a key and groups the results 
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of key used for matching elements</typeparam>
            <typeparam name="TResult">The type of elements in the returned sequence</typeparam>
            <param name="outer">The outer sequence</param>
            <param name="inner">The inner sequence</param>
            <param name="outerKeySelector">The function to extract a key from an outer element</param>
            <param name="innerKeySelector">The function to extract a key from an inner element</param>
            <param name="resultSelector">The function to combine an outer item and a group of inner items</param>
            <returns>A new sequence of result element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},System.Threading.Tasks.ValueTask{``3}})">
            <summary>
            Joins two sequences based on a key and groups the results 
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of key used for matching elements</typeparam>
            <typeparam name="TResult">The type of elements in the returned sequence</typeparam>
            <param name="outer">The outer sequence</param>
            <param name="inner">The inner sequence</param>
            <param name="outerKeySelector">The function to extract a key from an outer element</param>
            <param name="innerKeySelector">The function to extract a key from an inner element</param>
            <param name="resultSelector">The function to combine an outer item and a group of inner items</param>
            <returns>A new sequence of result element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},System.Threading.Tasks.Task{``3}})">
            <summary>
            Joins two sequences based on a key and groups the results 
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of key used for matching elements</typeparam>
            <typeparam name="TResult">The type of elements in the returned sequence</typeparam>
            <param name="outer">The outer sequence</param>
            <param name="inner">The inner sequence</param>
            <param name="outerKeySelector">The function to extract a key from an outer element</param>
            <param name="innerKeySelector">The function to extract a key from an inner element</param>
            <param name="resultSelector">The function to combine an outer item and a group of inner items</param>
            <returns>A new sequence of result element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Joins two sequences based on a key and groups the results 
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of key used for matching elements</typeparam>
            <typeparam name="TResult">The type of elements in the returned sequence</typeparam>
            <param name="outer">The outer sequence</param>
            <param name="inner">The inner sequence</param>
            <param name="outerKeySelector">The function to extract a key from an outer element</param>
            <param name="innerKeySelector">The function to extract a key from an inner element</param>
            <param name="resultSelector">The function to combine an outer item and a group of inner items</param>
            <param name="comparer">The means to determine if two keys are equal</param>
            <returns>A new sequence of result element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Joins two sequences based on a key and groups the results 
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of key used for matching elements</typeparam>
            <typeparam name="TResult">The type of elements in the returned sequence</typeparam>
            <param name="outer">The outer sequence</param>
            <param name="inner">The inner sequence</param>
            <param name="outerKeySelector">The function to extract a key from an outer element</param>
            <param name="innerKeySelector">The function to extract a key from an inner element</param>
            <param name="resultSelector">The function to combine an outer item and a group of inner items</param>
            <param name="comparer">The means to determine if two keys are equal</param>
            <returns>A new sequence of result element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.GroupJoin``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1},System.Threading.Tasks.Task{``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Joins two sequences based on a key and groups the results 
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of key used for matching elements</typeparam>
            <typeparam name="TResult">The type of elements in the returned sequence</typeparam>
            <param name="outer">The outer sequence</param>
            <param name="inner">The inner sequence</param>
            <param name="outerKeySelector">The function to extract a key from an outer element</param>
            <param name="innerKeySelector">The function to extract a key from an inner element</param>
            <param name="resultSelector">The function to combine an outer item and a group of inner items</param>
            <param name="comparer">The means to determine if two keys are equal</param>
            <returns>A new sequence of result element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Intersect``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Performs the set intersect between two sequences
            </summary>
            <typeparam name="TSource">The type of elements contained in both sequences</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Intersect``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs the set intersect between two sequences
            </summary>
            <typeparam name="TSource">The type of elements contained in both sequences</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="comparer">How elements in the sequences should be compared for equality. If null, the default comparer for <typeparamref name="TSource"/> will be used</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``3}})">
            <summary>
            Correlates the elements of two sequences based on matching keys
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of keys to compare</typeparam>
            <typeparam name="TResult">The type of result produced by the join</typeparam>
            <param name="outer">The outer sequence of elements</param>
            <param name="inner">The inner sequence of elements</param>
            <param name="outerKeySelector">The function to extract a key from a <typeparamref name="TOuter"/> element</param>
            <param name="innerKeySelector">The function to extract a key from a <typeparamref name="TInner"/> element</param>
            <param name="resultSelector">The function to combine a <typeparamref name="TOuter"/> and a <typeparamref name="TInner"/> to produce a <typeparamref name="TResult"/></param>
            <returns>The combined results</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``0,``1,System.Threading.Tasks.Task{``3}})">
            <summary>
            Correlates the elements of two sequences based on matching keys
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of keys to compare</typeparam>
            <typeparam name="TResult">The type of result produced by the join</typeparam>
            <param name="outer">The outer sequence of elements</param>
            <param name="inner">The inner sequence of elements</param>
            <param name="outerKeySelector">The function to extract a key from a <typeparamref name="TOuter"/> element</param>
            <param name="innerKeySelector">The function to extract a key from a <typeparamref name="TInner"/> element</param>
            <param name="resultSelector">The function to combine a <typeparamref name="TOuter"/> and a <typeparamref name="TInner"/> to produce a <typeparamref name="TResult"/></param>
            <returns>The combined results</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Func{``1,System.Threading.Tasks.ValueTask{``2}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of keys to compare</typeparam>
            <typeparam name="TResult">The type of result produced by the join</typeparam>
            <param name="outer">The outer sequence of elements</param>
            <param name="inner">The inner sequence of elements</param>
            <param name="outerKeySelector">The function to extract a key from a <typeparamref name="TOuter"/> element</param>
            <param name="innerKeySelector">The function to extract a key from a <typeparamref name="TInner"/> element</param>
            <param name="resultSelector">The function to combine a <typeparamref name="TOuter"/> and a <typeparamref name="TInner"/> to produce a <typeparamref name="TResult"/></param>
            <param name="comparer">An equality comparer for the keys</param>
            <returns>The combined results</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Join``4(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Func{``1,System.Threading.Tasks.Task{``2}},System.Func{``0,``1,System.Threading.Tasks.Task{``3}},System.Collections.Generic.IEqualityComparer{``2})">
            <summary>
            Correlates the elements of two sequences based on matching keys
            </summary>
            <typeparam name="TOuter">The type of elements in the outer sequence</typeparam>
            <typeparam name="TInner">The type of elements in the inner sequence</typeparam>
            <typeparam name="TKey">The type of keys to compare</typeparam>
            <typeparam name="TResult">The type of result produced by the join</typeparam>
            <param name="outer">The outer sequence of elements</param>
            <param name="inner">The inner sequence of elements</param>
            <param name="outerKeySelector">The function to extract a key from a <typeparamref name="TOuter"/> element</param>
            <param name="innerKeySelector">The function to extract a key from a <typeparamref name="TInner"/> element</param>
            <param name="resultSelector">The function to combine a <typeparamref name="TOuter"/> and a <typeparamref name="TInner"/> to produce a <typeparamref name="TResult"/></param>
            <param name="comparer">An equality comparer for the keys</param>
            <returns>The combined results</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Last``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the last element of the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The last element of the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LastOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the last element of the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The last element of the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Last``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the last element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The last element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Last``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The last element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Last``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the last element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The last element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LastOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the last element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The last element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LastOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the last element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The last element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.LastOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the last element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The last element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TSource"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TResult"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TResult"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TResult"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TSource"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TResult"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TResult"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <remarks>The default comparer for <typeparamref name="TResult"/> will be used to perform comparisons</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TResult">The type of values to compare</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <param name="comparer">The comparer to use to determine the lowest value</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int32}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Int32})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int32}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Int32})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int64}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Int64})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int64}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int64}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Int64})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int64}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Decimal}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Decimal})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Decimal}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Decimal}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Decimal})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Decimal}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Single}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Single})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Single}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Single}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Single})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Single}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Double}}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min(System.Collections.Generic.IAsyncEnumerable{System.Double})">
            <summary>
            Locates the lowest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Min``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Double}})">
            <summary>
            Locates the lowest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The lowest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Double}}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max(System.Collections.Generic.IAsyncEnumerable{System.Double})">
            <summary>
            Locates the highest value obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Max``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Double}})">
            <summary>
            Locates the highest value obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The highest value found in the sequence</returns>
            <exception cref="T:System.InvalidOperationException">The sequence contains no elements</exception>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OfType``2(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Filters the elements of an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on the specified type
            </summary>
            <typeparam name="TSource">The basic type of elements contained in the sequence</typeparam>
            <typeparam name="TResult">The type of elements desired in the result</typeparam>
            <param name="source">The sequence of elements to filter</param>
            <returns>A sequence of elements that are <typeparamref name="TResult"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderBy``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.OrderByDescending``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Prepend``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.ValueTask{``0})">
            <summary>
            Creates a sequence from an existing sequence and a new element that should appear before the existing ones
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The existing sequence</param>
            <param name="element">The new element</param>
            <returns>The sequence containing all elements from the original sequence and the new element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Prepend``1(System.Collections.Generic.IAsyncEnumerable{``0},``0)">
            <summary>
            Creates a sequence from an existing sequence and a new element that should appear before the existing ones
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The existing sequence</param>
            <param name="element">The new element</param>
            <returns>The sequence containing all elements from the original sequence and the new element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Prepend``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.Tasks.Task{``0})">
            <summary>
            Creates a sequence from an existing sequence and a new element that should appear before the existing ones
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The existing sequence</param>
            <param name="element">The new element</param>
            <returns>The sequence containing all elements from the original sequence and the new element</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Range(System.Int32,System.Int32)">
            <summary>
            Wraps <see cref="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)"/>
            </summary>
            <param name="start">The first number to return</param>
            <param name="count">The number of items to return</param>
            <returns></returns>
            <remarks>There should be no reason to use this method</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Repeat``1(``0,System.Int32)">
            <summary>
            Wraps <see cref="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)"/>
            </summary>
            <typeparam name="TElement">The type of elements that are repeated/returned</typeparam>
            <param name="element">The element to repeat</param>
            <param name="count">The number of times to return the element</param>
            <returns></returns>
            <remarks>There should be no reason to use this method</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Project a sequence of elements to a new type
            </summary>
            <typeparam name="TSource">The type of the elements in the existing sequence</typeparam>
            <typeparam name="TResult">The type of elements in the projected sequence</typeparam>
            <param name="source">The existing sequence of elements</param>
            <param name="selector">The <see cref="T:System.Func`2"/> the transforms the elements in the sequence</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the projected elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Project a sequence of elements to a new type
            </summary>
            <typeparam name="TSource">The type of the elements in the existing sequence</typeparam>
            <typeparam name="TResult">The type of elements in the projected sequence</typeparam>
            <param name="source">The existing sequence of elements</param>
            <param name="selector">The <see cref="T:System.Func`2"/> the transforms the elements in the sequence</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the projected elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Project a sequence of elements to a new type
            </summary>
            <typeparam name="TSource">The type of the elements in the existing sequence</typeparam>
            <typeparam name="TResult">The type of elements in the projected sequence</typeparam>
            <param name="source">The existing sequence of elements</param>
            <param name="selector">The <see cref="T:System.Func`2"/> the transforms the elements in the sequence</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the projected elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Project a sequence of elements to a new type
            </summary>
            <typeparam name="TSource">The type of the elements in the existing sequence</typeparam>
            <typeparam name="TResult">The type of elements in the projected sequence</typeparam>
            <param name="source">The existing sequence of elements</param>
            <param name="selector">The <see cref="T:System.Func`2"/> the transforms the elements in the sequence</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the projected elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <summary>
            Project a sequence of elements to a new type
            </summary>
            <typeparam name="TSource">The type of the elements in the existing sequence</typeparam>
            <typeparam name="TResult">The type of elements in the projected sequence</typeparam>
            <param name="source">The existing sequence of elements</param>
            <param name="selector">The <see cref="T:System.Func`2"/> the transforms the elements in the sequence</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the projected elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Select``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{``1}})">
            <summary>
            Project a sequence of elements to a new type
            </summary>
            <typeparam name="TSource">The type of the elements in the existing sequence</typeparam>
            <typeparam name="TResult">The type of elements in the projected sequence</typeparam>
            <param name="source">The existing sequence of elements</param>
            <param name="selector">The <see cref="T:System.Func`2"/> the transforms the elements in the sequence</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the projected elements</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="selector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="selector">The transformation that generates the new sequences</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TCollection">The type of elements in the new sequences</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="collectionSelector">The transformation that generates the new sequences</param>
            <param name="resultSelector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TCollection">The type of elements in the new sequences</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="collectionSelector">The transformation that generates the new sequences</param>
            <param name="resultSelector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TCollection">The type of elements in the new sequences</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="collectionSelector">The transformation that generates the new sequences</param>
            <param name="resultSelector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TCollection">The type of elements in the new sequences</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="collectionSelector">The transformation that generates the new sequences</param>
            <param name="resultSelector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TCollection">The type of elements in the new sequences</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="collectionSelector">The transformation that generates the new sequences</param>
            <param name="resultSelector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SelectMany``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IAsyncEnumerable{``1}},System.Func{``0,``1,``2})">
            <summary>
            Projects a sequence to a new sequence of sequences and then flattens the result
            </summary>
            <typeparam name="TSource">The type of elements in the original sequence</typeparam>
            <typeparam name="TCollection">The type of elements in the new sequences</typeparam>
            <typeparam name="TResult">The type of elements in the flattened sequence</typeparam>
            <param name="source">The original sequence</param>
            <param name="collectionSelector">The transformation that generates the new sequences</param>
            <param name="resultSelector">The transformation to obtain each flattened result</param>
            <returns></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SequenceEqual``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Determines whether two sequences are equal
            </summary>
            <typeparam name="TSource">The type of elements in the sequences</typeparam>
            <param name="first">The first sequence of elements</param>
            <param name="second">The second sequence of elements</param>
            <returns>True if the sequences are equal, otherwise false</returns>
            <remarks>The default equality comparer for <typeparamref name="TSource"/> will be used for comparing elements</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SequenceEqual``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether two sequences are equal using a specific comparer
            </summary>
            <typeparam name="TSource">The type of elements in the sequences</typeparam>
            <param name="first">The first sequence of elements</param>
            <param name="second">The second sequence of elements</param>
            <param name="comparer">The comparer to use to determine if two elements are equal</param>
            <returns>True if the sequences are equal, otherwise false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Single``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the single element of the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The single element of the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SingleOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Returns the single element of the sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <returns>The single element of the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Single``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the single element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Single``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the single element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Single``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the single element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SingleOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns the single element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SingleOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns the single element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SingleOrDefault``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns the single element of the sequence that satisfies <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter for finding a correct element</param>
            <returns>The element that satfisfied <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Skip``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence omitting the first <paramref name="count"/> elements of the original sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="count">The number of elements to omit</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> except for the first <paramref name="count"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Bypasses elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> after <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Bypasses elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> after <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Bypasses elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> after <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Bypasses elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> after <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Bypasses elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> after <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.SkipWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Bypasses elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> after <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int32}})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int32}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int32}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Int32})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int32}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int32}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Int64}})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Int64}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Int64}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Int64})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int64})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Int64}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Int64}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Decimal}})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Decimal}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Decimal}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Decimal})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Decimal})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Decimal}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Decimal}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Single}})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Single}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Single}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Single})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Single})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Single}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Single}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Nullable{System.Double}})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Nullable{System.Double}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Nullable{System.Double}}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum(System.Collections.Generic.IAsyncEnumerable{System.Double})">
            <summary>
            Totals the values obtained from a sequence
            </summary>
            <param name="source">The sequence of elements</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Double})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Double}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Sum``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Double}})">
            <summary>
            Totals the values obtained by transforming a sequence with a <paramref name="selector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="selector">The selector to transform the results</param>
            <returns>The total of values found in the sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Take``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Int32)">
            <summary>
            Returns a sequence only including the first <paramref name="count"/> elements of the original sequence
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="count">The number of elements to keep</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing the first <paramref name="count"/> elements from <paramref name="source"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> until <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Returns elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> until <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> until <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Returns elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> until <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Returns elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> until <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.TakeWhile``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Returns elements in the original sequence until <paramref name="predicate"/> returns false
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The predicate to test</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing all of the elements contained in <paramref name="source"/> until <paramref name="predicate"/> returned false</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenBy``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenByDescending``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenBy``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenByDescending``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IComparer{``1})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <param name="comparer">The function to use to compare keys</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenBy``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenByDescending``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenBy``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ThenByDescending``2(DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Sort a sequence in ascending order, based on a particular key
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of key</typeparam>
            <param name="source">The sequence of elements</param>
            <param name="keySelector">The function to extract a key value from an element</param>
            <returns>The sorted sequence</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToHashSet``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> using the default comparer for <typeparamref name="TSource"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to create the <see cref="T:System.Collections.Generic.HashSet`1"/> from</param>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains values of type <typeparamref name="TSource"/> selected from the input sequence.</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToHashSet``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.HashSet`1"/> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> using the <paramref name="comparer"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to create the <see cref="T:System.Collections.Generic.HashSet`1"/> from</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.EqualityComparer`1"/> to compare the elements. If null, the default comparer will be used</param>
            <returns>A <see cref="T:System.Collections.Generic.HashSet`1"/> that contains values of type <typeparamref name="TSource"/> selected from the input sequence.</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToList``1(System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Creates a <see cref="T:System.Collections.Generic.List`1"/> from an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>
            </summary>
            <typeparam name="TSource">The type of elements in the <paramref name="source"/></typeparam>
            <param name="source">An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to create the <see cref="T:System.Collections.Generic.List`1"/> from</param>
            <returns>A <see cref="T:System.Collections.Generic.List`1"/> that contains values of type <typeparamref name="TSource"/> selected from the input sequence.</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,System.Threading.Tasks.Task{``2}})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.Task{``2}})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{``1}},System.Func{``0,``2})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``2(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.ValueTask{``2}},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,``1},System.Func{``0,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <param name="comparer">A comparer to determine if key values are equal</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.ToLookup``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``1}},System.Func{``0,``2})">
            <summary>
            Constructs an <see cref="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2"/> from a sequence based on a <paramref name="keySelector"/>
            </summary>
            <typeparam name="TSource">The type of elements in the sequence</typeparam>
            <typeparam name="TKey">The type of the key to extract from each element</typeparam>
            <typeparam name="TElement">The type of element which will appear in the lookup</typeparam>
            <param name="source">The original sequence</param>
            <param name="keySelector">The function that extracts the key from the element</param>
            <param name="elementSelector">A function to transform the original element</param>
            <returns>The lookup</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Union``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0})">
            <summary>
            Performs the set union between two sequences
            </summary>
            <typeparam name="TSource">The type of elements contained in both sequences</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Union``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Performs the set union between two sequences
            </summary>
            <typeparam name="TSource">The type of elements contained in both sequences</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="comparer">How elements in the sequences should be compared for equality. If null, the default comparer for <typeparamref name="TSource"/> will be used</param>
            <returns>The unique set of elements contained in the set</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter which items must pass</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing elements that passed the <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter which items must pass</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing elements that passed the <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter which items must pass</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing elements that passed the <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.ValueTask{System.Boolean}})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter which items must pass</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing elements that passed the <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter which items must pass</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing elements that passed the <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Where``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task{System.Boolean}})">
            <summary>
            Filters an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> based on a <paramref name="predicate"/>
            </summary>
            <typeparam name="TSource">The type of elements in <paramref name="source"/></typeparam>
            <param name="source">The sequence of elements</param>
            <param name="predicate">The filter which items must pass</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> containing elements that passed the <paramref name="predicate"/></returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,``2})">
            <summary>
            Combines corresponding elements from two sequences using a specific function
            </summary>
            <typeparam name="TFirst">The type of elements in the first sequence</typeparam>
            <typeparam name="TSecond">The type of elements in the second sequence</typeparam>
            <typeparam name="TResult">The type of elements that the combining function produces</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="resultSelector">The combining function, taking an element from the first sequence and an element from the second sequence and producing a result</param>
            <returns>The sequence of elements produced from the combining function</returns>
            <remarks>If the sequences are of unequal length, this resulting sequence will contain the same number of elements as the shorter of the two</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,System.Threading.Tasks.ValueTask{``2}})">
            <summary>
            Combines corresponding elements from two sequences using a specific function
            </summary>
            <typeparam name="TFirst">The type of elements in the first sequence</typeparam>
            <typeparam name="TSecond">The type of elements in the second sequence</typeparam>
            <typeparam name="TResult">The type of elements that the combining function produces</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="resultSelector">The combining function, taking an element from the first sequence and an element from the second sequence and producing a result</param>
            <returns>The sequence of elements produced from the combining function</returns>
            <remarks>If the sequences are of unequal length, this resulting sequence will contain the same number of elements as the shorter of the two</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.AsyncEnumerable.Zip``3(System.Collections.Generic.IAsyncEnumerable{``0},System.Collections.Generic.IAsyncEnumerable{``1},System.Func{``0,``1,System.Threading.Tasks.Task{``2}})">
            <summary>
            Combines corresponding elements from two sequences using a specific function
            </summary>
            <typeparam name="TFirst">The type of elements in the first sequence</typeparam>
            <typeparam name="TSecond">The type of elements in the second sequence</typeparam>
            <typeparam name="TResult">The type of elements that the combining function produces</typeparam>
            <param name="first">The first sequence</param>
            <param name="second">The second sequence</param>
            <param name="resultSelector">The combining function, taking an element from the first sequence and an element from the second sequence and producing a result</param>
            <returns>The sequence of elements produced from the combining function</returns>
            <remarks>If the sequences are of unequal length, this resulting sequence will contain the same number of elements as the shorter of the two</remarks>
        </member>
        <member name="T:DamienTheUnbeliever.System.Linq.IAsyncGrouping`2">
            <summary>
            A group of elements all related by the same <typeparamref name="TKey"/> value
            </summary>
            <typeparam name="TKey">The type of key for the grouping</typeparam>
            <typeparam name="TElement">The elements that share the same key</typeparam>
        </member>
        <member name="P:DamienTheUnbeliever.System.Linq.IAsyncGrouping`2.Key">
            <summary>
            The key that all elements in the group share
            </summary>
        </member>
        <member name="T:DamienTheUnbeliever.System.Linq.IAsyncLookup`2">
            <summary>
            A dictionary-like collection potentially containing multiple elements per key
            </summary>
            <typeparam name="TKey">The type of keys by which the lookup is indexed</typeparam>
            <typeparam name="TElement">The type of elements contained in the lookup</typeparam>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.IAsyncLookup`2.GetCount">
            <summary>
            The number of elements contained in the collection
            </summary>
            <remarks>The count will not be available until the original source has been entirely consumed</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.IAsyncLookup`2.ContainsKey(`0)">
            <summary>
            Determines if there are elements for the given key
            </summary>
            <param name="key">The key to check</param>
            <returns>true if the lookup has elements for the key, false otherwise</returns>
            <remarks>This method can complete it's task as soon as it is confirmed that there are elements for the key. The entire original source will need to be consumed to return a negative result</remarks>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.IAsyncLookup`2.GetItem(`0)">
            <summary>
            Provides the elements contained in the lookup for the given key
            </summary>
            <param name="key">The key to check</param>
            <returns>The sequence of elements contained in this lookup for the key</returns>
        </member>
        <member name="T:DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable`1">
            <summary>
            An async enumerable in which order is strictly defined
            </summary>
            <typeparam name="TElement">The type of elements returned by the enumerable</typeparam>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,System.Threading.Tasks.ValueTask{``0}},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Extend an ordered async enumerable by an additional selector to break ties
            </summary>
            <typeparam name="TKey">The type of keys for the new ordering to work over</typeparam>
            <param name="keySelector">The function to extract a key from each element</param>
            <param name="comparer">The means by which keys will be compared</param>
            <param name="descending">
            <para>If true, then each returned element shall be higher or equal (by key) than any subsequent element</para>
            <para>If false, then each returned element shall be lower or equal (by key) than any subsequent element</para>
            </param>
            <returns>The elements applying the appropriate ordering</returns>
        </member>
        <member name="M:DamienTheUnbeliever.System.Linq.IOrderedAsyncEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,System.Threading.Tasks.Task{``0}},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Extend an ordered async enumerable by an additional selector to break ties
            </summary>
            <typeparam name="TKey">The type of keys for the new ordering to work over</typeparam>
            <param name="keySelector">The function to extract a key from each element</param>
            <param name="comparer">The means by which keys will be compared</param>
            <param name="descending">
            <para>If true, then each returned element shall be higher or equal (by key) than any subsequent element</para>
            <para>If false, then each returned element shall be lower or equal (by key) than any subsequent element</para>
            </param>
            <returns>The elements applying the appropriate ordering</returns>
        </member>
        <member name="T:DamienTheUnbeliever.System.Linq.IUnorderedAsyncEnumerable`1">
            <summary>
            An async enumerable that is free to reorder elements based on when each element becomes available
            </summary>
            <typeparam name="TElement"></typeparam>
        </member>
    </members>
</doc>
